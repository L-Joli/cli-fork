name: CLI Release

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 12 * * 2'  # Runs every Tuesday at 12:00 PM (noon) ET

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      - name: Set Git author
        run: |
          git config user.email "joli.lui@taplytics.com"
          git config user.name "Joli Lui"

      - name: Check if commit has a new tag
        id: check_tag
        run: |
          if git describe --tags --exact-match HEAD >/dev/null 2>&1; then
            echo "::set-output name=has_tag::true"
          else
            echo "::set-output name=has_tag::false"
          fi

      # - name: Run Actions if no new tag
      #   if: steps.check_tag.outputs.has_tag == 'false'
      #   run: echo "Run Actions if no new tag"
      #   steps:
        
      - run: echo "github.action_path:${{ github.action_path }}"
      
      - name: Get node version
        id: get_node_version
        run: |
          echo "::set-output name=NVMRC::$(cat .nvmrc)"
          echo $(cat .nvmrc)

      - name: Set up Node.js
        if: steps.check_tag.outputs.has_tag == 'false'
        uses: actions/setup-node@v3
        with:
          node-version: "${{ steps.get_node_version.outputs.NVMRC }}"

      - name: Install dependencies
        if: steps.check_tag.outputs.has_tag == 'false'
        run: yarn install
        
      - name: Build
        if: steps.check_tag.outputs.has_tag == 'false'
        run: yarn build

      - name: List repository contents
        run: ls -al

      - name: Bump CLI version
        if: steps.check_tag.outputs.has_tag == 'false'
        run: npm version patch --force

      - name: Read version from package.json
        if: steps.check_tag.outputs.has_tag == 'false'
        run: |
          export VERSION=$(node -p "require('./package.json').version")
          echo "CLI version: $VERSION"

      - name: Commit and push tag to main branch
        if: steps.check_tag.outputs.has_tag == 'false'
        run: |
          git add .
          git commit -m "Release v$VERSION"
          git push origin main --follow-tags
      
      - name: Create GitHub Release
        if: steps.check_tag.outputs.has_tag == 'false'
        uses: ncipollo/release-action@v1
        with:
          name: "v$VERSION"
          generateReleaseNotes: "true"
          makeLatest: "true"

      # - name: Publish to NPM
      #   run: npm publish --access public

      # - name: Update CLI version in docs repo
      #   run: |
      #     git clone https://github.com/DevCycleHQ/devcycle-docs.git
      #     cd devcycle-docs
      #     sed -i "s/const DVC_CLI_VERSION = .*/const DVC_CLI_VERSION = 'v$VERSION'/" docusaurus.config.js
      #     git add docusaurus.config.js
      #     git commit -m "Update CLI version to v$VERSION"
      #     git remote set-url origin https://github.com/DevCycleHQ/devcycle-docs.git
      #     BRANCH_NAME="update-cli-version"
      #     git branch "$BRANCH_NAME"
      #     git checkout "$BRANCH_NAME"
      #     git push -u origin "$BRANCH_NAME"
      #     gh pr create --repo DevCycleHQ/devcycle-docs --base main --head "$BRANCH_NAME" --title "Update CLI version to v$VERSION" --body "This PR was automatically created by the DevCycle CLI release workflow."
